kind: pipeline
type: docker
name: integration
 
steps:
  - name: code-analysis
    image: boulundeasv/dotnet-sdk-with-java
    environment:
      SONARSECRET:
        from_secret: SonarQubeSecret
    commands:
      - exit 0
      - dotnet sonarscanner begin
          /k:"easv-devops_CDWeatherExample_AY4d5zUxEVvRW2O60EXK"
          /d:sonar.host.url="http://sonar.setgo.dk:9000"  
          /d:sonar.token="$SONARSECRET"
          /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          /d:sonar.qualitygate.wait=true
      - dotnet build --no-incremental
      - dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
      - dotnet sonarscanner end /d:sonar.token="$SONARSECRET"

---

kind: pipeline
type: docker
name: deliver
depends_on:
  - integration

steps:
  - name: publish api
    image: plugins/docker
    settings:
      DOCKERUSERNAME:
        from_secret: DockerUsername
      DOCKERPASSWORD:
        from_secret: DockerPassword
      context: src
      dockerfile: WeatherAPI/Dockerfile
      repo: $DOCKERUSERNAME/cd-weather-api
      tags: 
        - staging
  - name: publish web
    image: plugins/docker
    settings:
      DOCKERUSERNAME:
        from_secret: DockerUsername
      DOCKERPASSWORD:
        from_secret: DockerPassword
      context: src
      dockerfile: WeatherFrontend/Dockerfile
      repo: $DOCKERUSERNAME/cd-weather-web
      tags: 
        - staging
  - name: wait
    image: alpine
    commands:
      - sleep 10
    depends_on:
      - publish api
      - publish web
